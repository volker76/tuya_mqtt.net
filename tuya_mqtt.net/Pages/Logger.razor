@page "/logger"
@using tuya_mqtt.net.Data;
@using tuya_mqtt.net.Helper;
@* ReSharper disable once InconsistentNaming *@
@inject ILogger<Logger> LocalLogger
@inject ILogger<BrowserService> BrowserServiceLogger;
@inject BrowserService _browser
@implements IAsyncDisposable

<component type="typeof(Logger)" render-mode="Server" />

<PageTitle>Log</PageTitle>
<h1>System log</h1>

<div @ref=_myElementReference>
    <LogComponent Height="@LogWindowHeight" />
</div>
@code {

    private ElementReference _myElementReference;

    private int LogWindowHeight { get; set; }

    protected override void OnInitialized()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _browser!.InitAsync();
            _browser!.Resize += OnResize;

            var rect = await _browser.GetElementClientRectAsync(_myElementReference);

            CalculateNewLogComponentHeight(new WindowSize() { Height = _browser!.BrowserHeight, Width = _browser!.BrowserWidth }, rect);
            StateHasChanged();
        }

    }

    private bool _resize;
    private async void OnResize(object? obj, WindowSize newSize)
    {
        try
        {
            if (_resize) return;
            _resize = true;

            if (_browser!.IsInitialized)
            {
                try
                {
#if DEBUG
                LocalLogger.LogDebug($"OnResize {_myElementReference}", _myElementReference);
#endif
                    var rect = await _browser!.GetElementClientRectAsync(_myElementReference);

                    CalculateNewLogComponentHeight(newSize, rect);
                    StateHasChanged();
                }
                catch (Exception e)
                {
                    LocalLogger.LogError(e, "Error in OnResize");
                }
            }
            else
            {
                LocalLogger.LogWarning("calling Resize, but not having Browser object initialized");
            }
        }
        finally
        {
            _resize = false;
        }
    }

    private void CalculateNewLogComponentHeight(WindowSize viewportSize, BrowserService.BoundingClientRect logComponentClientRect)
    {

#warning TODO - find out where this offset of ~66 come from

        LogWindowHeight = viewportSize.Height - (int)logComponentClientRect.Top - 66;
    }

    public async ValueTask DisposeAsync()
    {
        await _browser.DisposeAsync();
    }

}
