@page "/settings"
@using Awesome.Net.WritableOptions;
@using tuya_mqtt.net.Services
@using MqttClientOptions = tuya_mqtt.net.Data.MqttClientOptions
@inject ILogger<Settings> Logger
@inject IWritableOptions<MqttClientOptions> data
@inject MqttClientService client;
@inject ISnackbar Snackbar

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Tuya</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText> </MudText>
    </MudCardContent>
</MudCard>

<MudCard Class="mt-5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">MQTT</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Elevation="0">
            <MudStack Row="true" Class="align-center" >
                <MudTextField @bind-Value="_mqttHost" Label="Adress/IP" HelperText="Broker Adress" Variant="Variant.Text"></MudTextField>
                <MudButton Variant="Variant.Filled" Style="height:40px" Color="Color.Primary" OnClick=@TestConnection>Test Connection</MudButton>
            </MudStack>
            <MudStack Row="true" Class="align-center">
                <MudTextField @bind-Value="_mqttPort" Label="Port" HelperText="Broker Port" Variant="Variant.Text" Format="D"></MudTextField>
                <MudTooltip Text="use secure connection to broker">
                    <MudSwitch @bind-Checked="_mqttTls" Label="TLS" Color="Color.Primary"/>
                </MudTooltip>
            </MudStack>
        </MudPaper>
        <MudPaper class="mt-6  mb-4" Elevation="0">
            <MudSwitch @bind-Checked="MqttAuthentication" Label="Use Authentication" Color="Color.Primary" />
            <MudTextField @bind-Value="_mqttUsername" Disabled=@NotMqttAuthentication Label="Username" HelperText="MQTT broker login" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="_mqttPassword" Disabled=@NotMqttAuthentication Label="Password" HelperText="MQTT broker password" Variant="Variant.Text" InputType="@_passwordInput"
                          Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ButtonPasswordToggle" AdornmentAriaLabel="Show Password"></MudTextField>
        </MudPaper>
        <MudDivider />
        <MudPaper Class="mt-4" Elevation="0">
            <MudTooltip Text="use prototcol version 5, version 3 otherwise">
                <MudSwitch @bind-Checked="_mqttV5" Label="MQTT v5" onH Color="Color.Primary"/>
            </MudTooltip>
            <MudTooltip Text="allow packet fragmentation">
                <MudSwitch @bind-Checked="_mqttNoFragmentation" Label="Packet fagmentation" Color="Color.Primary"/>
            </MudTooltip>
            <MudTextField @bind-Value="_mqttTopic" Label="Topic" HelperText="MQTT Main Topic" Variant="Variant.Text"></MudTextField>
     
        </MudPaper>
        <MudPaper Elevation="0" Class="d-flex justify-end pt-5 ar-2">
            <MudFab Color="Color.Primary"  StartIcon="@Icons.Material.Filled.Save" OnClick="SaveMqtt" />
        </MudPaper>
    </MudCardContent>
</MudCard>
<MudOverlay Visible=@isInWait DarkBackground="true" >
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
</MudOverlay>

@code {
    private bool isInWait = false;  //true if overlay shall be on and spinner rotating
    private string _mqttHost = string.Empty;
    private string _mqttPort = string.Empty;
    private string _mqttTopic = string.Empty;
    private bool _mqttAuthentication = false;
    private bool MqttAuthentication
    {
        get => _mqttAuthentication;
        set => _mqttAuthentication = value;
    }
    private bool NotMqttAuthentication => !_mqttAuthentication;
    private bool _mqttV5 = false;
    private bool _mqttTls = false;
    private bool _mqttNoFragmentation = false;

    private string _mqttUsername = string.Empty;
    private string _mqttPassword = string.Empty;

    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool _isShow = false;

    void ButtonPasswordToggle() //toggle button at password text box
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    protected override void OnInitialized()
    {
        /* get values from global settings*/
        _mqttHost = data.Value.MqttHost;
        _mqttPort = data.Value.MqttPort > 0 ? data.Value.MqttPort.ToString() : String.Empty;
        _mqttUsername = data.Value.MqttUser;
        _mqttPassword = data.Value.MqttPassword;
        MqttAuthentication = data.Value.MqttAuthentication;
        _mqttV5 = data.Value.MqttV5;
        _mqttTls = data.Value.MqttTls;
        _mqttNoFragmentation = data.Value.MqttNoFragmentation;
        _mqttTopic = data.Value.MqttTopic;

    }

    private async Task TestConnection()
    {
        try
        {
            if (!int.TryParse(_mqttPort, out var port))
            {
                port = 0;
                _mqttPort = "";
            }
            MqttClientOptions options = new MqttClientOptions()
            {
                MqttHost = _mqttHost,
                MqttPort = port,
                MqttAuthentication = _mqttAuthentication,
                MqttUser = _mqttUsername,
                MqttPassword = _mqttPassword,
                MqttTopic = _mqttTopic,
                MqttV5 = _mqttV5,
                MqttTls = _mqttTls,
                MqttNoFragmentation = _mqttNoFragmentation
            };

            isInWait = true;
            StateHasChanged();
            var result = await client.TestAsync(options);
            if (result)
            {
                Snackbar.Add("Connected to MQTT broker", Severity.Success);
                Logger.LogInformation($"Test connection to {_mqttHost} successful.");
            }
            else
            {
                Snackbar.Add("No Error, but also not connected.", Severity.Warning);
                Logger.LogWarning($"Test connection to {_mqttHost} not established.");
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"MQTT connection error<p>{e.Message}", Severity.Error);
            Logger.LogError(e, $"Test connection to {_mqttHost} failed.");
        }
        finally
        {
            isInWait = false;
            StateHasChanged();
        }

    }


    private void SaveMqtt()
    {
        Logger.LogInformation($"Save MQTT Settings addr:{_mqttHost} port:{_mqttPort} topic:{_mqttTopic}");
        if (!int.TryParse(_mqttPort, out var port))
        {
            port = 0;
            _mqttPort = "";
        }
        data.Update((opt) =>
        {
            opt.MqttHost = _mqttHost;

            opt.MqttPort = port;
            opt.MqttAuthentication = _mqttAuthentication;
            opt.MqttUser = _mqttUsername;
            opt.MqttPassword = _mqttPassword;
            opt.MqttTopic = _mqttTopic;
            opt.MqttV5 = _mqttV5;
            opt.MqttTls = _mqttTls;
            opt.MqttNoFragmentation = _mqttNoFragmentation;
        });

        Snackbar.Add("Settings saved", Severity.Success);
    }

}
