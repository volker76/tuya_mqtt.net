@page "/tuyadevices"
@using com.clusterrr.TuyaNet;
@using static tuya_mqtt.net.Data.TuyaDeviceInformation;
@using tuya_mqtt.net.Data
@using tuya_mqtt.net.Services;
@inject TuyaCommunicatorService TuyaService;
@inject TuyaConnectedDeviceService TuyaConnectedDevices;
@inject NavigationManager NavManager
@inject ISnackbar Snackbar;
@inject ILogger<TuyaDevices> Logger;
@inject IBrowserService Browser;


<PageTitle>Tuya Devices</PageTitle>
@* ReSharper disable UnknownCssClass *@
<h1>Tuya Devices</h1>
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Server Status Overview</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" OnClick="GoSettings" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Class="h2">Server Status</MudText>
        <TuyaServerStatus />
    </MudCardContent>
</MudCard>
<MudExpansionPanels MultiExpansion="true" Class="pt-4">
    <MudExpansionPanel @ref=_expansionList IsInitiallyExpanded=true Text="Scanned Network Devices">
        <TuyaScannedDevices ScannedDevicesList="_tuyaScannedDevices" MonitoredDevices="_tuyaMonitoredDevices" OnClick="AddOrChangeTuyaDeviceFromScan" />
    </MudExpansionPanel>
    <div class="AddSection">
        <MudExpansionPanel Class="mt-3" @ref=_expansionAdd IsInitiallyExpanded=false Text="Add/Change Connected Device">
            <MudPaper>
                
                <MudToggleIconButton @bind-Toggled="@CloudMode" Disabled="@ApiDisabled"
                                     Icon="@Icons.Material.Filled.Lan" Color="@Color.Primary" Title="Switch to Cloud"
                                     ToggledIcon="@Icons.Material.Filled.Cloud" ToggledColor="@Color.Primary" ToggledTitle="Switch to Local"/>
                <span>@(CloudMode ? "Cloud Mode" : "Local Mode")</span>

                <MudStack Row="true" Class="align-center">
                    <MudTextField @bind-Value="_tuyaDeviceIp" Disabled="@CloudMode" Label="Adress/IP" HelperText="Device IP in the local network" Variant="Variant.Text"></MudTextField>
                    <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" OnClick="TestTuyaDevice">Test Connection</MudButton>
                </MudStack>
                <MudStack Row="true" Class="align-top">
                    <MudTextField @bind-Value="_tuyaId" Label="Device ID" HelperText="Device ID" Variant="Variant.Text"></MudTextField>
                    <MudSelect @bind-Value="_tuyaProtocolVersion" Disabled="@CloudMode" ToStringFunc="@ConverterProtocolVersion" T="TuyaProtocolVersion" Label="Protocol version" Style="width: 70px" Variant="Variant.Text">
                        <MudSelectItem Value="@(TuyaProtocolVersion.V31)"/>
                        <MudSelectItem Value="@(TuyaProtocolVersion.V33)"/>
                    </MudSelect>
                    <MudSelect @bind-Value="_tuyaDeviceType" Disabled="@CloudMode" ToStringFunc="@ConverterDeviceType" T="TuyaDeviceType" Label="DeviceType" Style="width: 70px" Variant="Variant.Text">
                        <MudSelectItem Value="@(TuyaDeviceType.LocalTuya0A)" />
                        <MudSelectItem Value="@(TuyaDeviceType.LocalTuya0D)" />
                    </MudSelect>
                </MudStack>

                <MudStack Row="true" Class="align-center">
                    <MudTextField @bind-Value="_tuyaLocalKey" Disabled="@CloudMode" Label="Local Key" HelperText="secure key of the device" Variant="Variant.Text"></MudTextField>
                    <div style="display:@(CloudMode ? "none":"inherit")">
                        @if (ApiDisabled)
                        {
                            <MudTooltip Text="Cloud API require credentials defined">
                                <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" Disabled="true" OnClick="GetLocalKeyFromAPI">Get from TUYA API</MudButton>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="Retrieve localKey property from cloud API">
                                <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" Disabled="false" OnClick="GetLocalKeyFromAPI">Get from TUYA API</MudButton>
                            </MudTooltip>
                        }
                    </div>

                </MudStack>
                <MudStack Row="true" Class="align-center">
                    <MudTextField Class="mt-4" @bind-Value="_tuyaName" Label="Name" HelperText="Given name for MQTT" Variant="Variant.Text"></MudTextField>
                    @if (ApiDisabled)
                    {
                        <MudTooltip Text="Cloud API require credentials defined">
                            <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" Disabled="true" OnClick="GetDeviceNameFromAPI">Get from TUYA API</MudButton>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Retrieve custom name property from cloud API">
                            <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" Disabled="false" OnClick="GetDeviceNameFromAPI">Get from TUYA API</MudButton>
                        </MudTooltip>
                    }
                </MudStack>
                <MudSelect @bind-Value="_tuyaPolltimeValue" ToStringFunc="@ConvertTimeFunc" Dense="true" T="double" Label="Polling interval" Variant="Variant.Text">
                    @foreach (var t in _timeList)
                    {
                        <MudSelectItem Value="@t"></MudSelectItem>
                    }
                </MudSelect>
                <MudStack Row="true" Class="align-center">
                    <MudTextField Class="mt-4" @bind-Value="_tuyaDps" Label="DP list" HelperText="Observed list of DPs" Variant="Variant.Text"></MudTextField>

                    <MudTooltip Text="Cloud API require credentials defined">
                        <MudButton Variant="Variant.Filled" Style="height: 40px" Color="Color.Primary" OnClick="IdentifyAllDPAsync">Identify DPs</MudButton>
                    </MudTooltip>
                    
                </MudStack>
            </MudPaper>
            <MudPaper Elevation="0" Class="d-flex justify-end pt-5 ar-2">
                <MudTooltip Text="Save device to monitored list">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveAddTuyaDeviceAsync"/>
                </MudTooltip>
                <MudTooltip Text="delete device from monitored list">
                    <MudFab Disabled="@(!_enableDelete)" Class="ml-4" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DeleteSweep" OnClick="DeleteTuyaDevice" />
                </MudTooltip>
            </MudPaper>
        <MudOverlay Visible=@_isInWait DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudOverlay>
    </MudExpansionPanel>
    </div>
    <MudExpansionPanel Class="mt-3" Text="Connected Devices & Data">
        <TuyaMonitoredDevices MonitoredDevices="_tuyaMonitoredDevices" MonitoredData="_tuyaMonitoredData" OnClick="AddOrChangeTuyaDeviceFromMonitor" />
    </MudExpansionPanel>
</MudExpansionPanels>
@* ReSharper restore UnknownCssClass *@
@code {
    private bool _cloudMode;
    private bool _isInWait;
    private MudExpansionPanel? _expansionList;
    private MudExpansionPanel? _expansionAdd;

    private readonly double[] _timeList = { 0.5,1,2,5,10,30,60 };

    private IEnumerable<KeyValuePair<string, TuyaDeviceScanInfo>>? _tuyaScannedDevices;
    private IReadOnlyDictionary<string, TuyaExtendedDeviceInformation>? _tuyaMonitoredDevices;
    private IReadOnlyDictionary<string, List<DP>?>? _tuyaMonitoredData;

    private TuyaProtocolVersion _tuyaProtocolVersion;
    private TuyaDeviceType _tuyaDeviceType;
    private string _tuyaDeviceIp = string.Empty;
    private string _tuyaId = string.Empty;
    private string _tuyaLocalKey = string.Empty;
    private string _tuyaName = string.Empty;
    private string _tuyaDps = string.Empty;
    private double _tuyaPolltimeValue = 10;
    private bool _enableDelete;

    private static string ConverterProtocolVersion(TuyaProtocolVersion p)
    {
        switch (p)
        {
            case TuyaProtocolVersion.V31:
                return "V 3.1";

            case TuyaProtocolVersion.V33:
                return "V 3.3";

        }
        return "";
    }

    private static string ConverterDeviceType(TuyaDeviceType dt)
    {
        switch (dt)
        {
            case TuyaDeviceType.LocalTuya0A:
                return "Type 0A (default)";

            case TuyaDeviceType.LocalTuya0D:
                return "Type 0D";
        }
        return "";
    }

    private static string ConvertTimeFunc(double t)
    {
        if (t>=1)
            return $"{t}s";
        else
            return $"{t*1000.0}ms";
    }

    protected override void OnInitialized()
    {
        Snackbar.Clear();

        _tuyaScannedDevices = TuyaService.GetTuyaScanDevices();
        _tuyaMonitoredDevices = TuyaConnectedDevices.GetMonitoredDevices();
        _tuyaMonitoredData = TuyaConnectedDevices.GetMonitoredData();
        TuyaConnectedDevices.OnDataUpdate += OnTuyaDataUpdate;
        TuyaService.OnTuyaScannerUpdate += OnTuyaScannerUpdate;

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

        }
    }

    public void GoSettings()
    {
        NavManager.NavigateTo("/settings");
    }

    private bool ApiDisabled
    {
        get
        {
            return !TuyaService.TuyaApiConfigured;
        }
    }

    private bool CloudMode
    {
        get
        {
            return _cloudMode && !ApiDisabled;
        }
        set
        {
            _cloudMode = value;
        }
    }

    private async void AddOrChangeTuyaDeviceFromMonitor(string id)
    {
        var devInfo = TuyaConnectedDevices.GetDevice(id);
        if (devInfo != null)
        {

            await AddItemsToForm(devInfo.Address, id, devInfo.ProtocolVersion);
        }
    }

    private async void AddOrChangeTuyaDeviceFromScan(TuyaDeviceScanInfo clicked)
    {
        if (_tuyaMonitoredDevices?.ContainsKey(clicked.GwId) == true)
        {
            //this is a change of existing data
            await AddItemsToForm(clicked.IP, clicked.GwId);
        }
        else
        {  //new item from scan
            var pv = TuyaProtocolVersion.V33;
            if (clicked.Version == "3.1") pv = TuyaProtocolVersion.V31;

            var ret = await TuyaService.GetDeviceDataFromApiAsync(clicked.GwId);
            string local = ret.Item2;
            string name = ret.Item3;
            if (ret.Item1)
            {
                await AddItemsToForm(clicked.IP, clicked.GwId, pv, local, name);
            }
            else
            {
                await AddItemsToForm(clicked.IP, clicked.GwId, pv);
            }
        }
    }

    private async Task AddItemsToForm(string addr, string id, TuyaProtocolVersion pv = TuyaProtocolVersion.V33, string localKey = "", string name = "")
    {
        _tuyaDeviceIp = addr;
        _tuyaId = id;
        if (_tuyaMonitoredDevices?.ContainsKey(id) == true)
        {
            _enableDelete = true;
            _tuyaLocalKey = _tuyaMonitoredDevices[id].Key;
            if (_tuyaMonitoredDevices[id].hasName)
            {
                _tuyaName = _tuyaMonitoredDevices[id].Name;
            }
            else
            {
                _tuyaName = "";
            }
            _cloudMode = _tuyaMonitoredDevices[id].CommunicationType == TuyaDeviceType.Cloud;
            _tuyaDeviceType = _tuyaMonitoredDevices[id].CommunicationType;
            _tuyaProtocolVersion = _tuyaMonitoredDevices[id].ProtocolVersion;
            _tuyaPolltimeValue = _tuyaMonitoredDevices[id].PollingInterval.TotalSeconds;
            _tuyaDps = _tuyaMonitoredDevices[id].MonitoredDPsString;
        }
        else
        {
            _cloudMode = false;
            _tuyaLocalKey = localKey;
            _tuyaName = name;
            _tuyaProtocolVersion = pv;
            _tuyaPolltimeValue = 10; //10 seconds default
            _enableDelete = false;
            _tuyaDps = String.Empty;
            _tuyaDeviceType = TuyaDeviceType.LocalTuya0A; //this shall work in most of the cases
        }

        _expansionList?.Expand(false);
        _expansionAdd?.Expand();
        await InvokeAsync(StateHasChanged);
        await Task.Delay(500);
        Browser!.ScrollClassIntoView("div.AddSection", 0).AndForget();
        await InvokeAsync(StateHasChanged);
    }

    // ReSharper disable once InconsistentNaming
    private async Task IdentifyAllDPAsync()
    {
        try
        {
            _isInWait = true;
            StateHasChanged();
            await Task.Delay(100);

            TuyaDeviceType comType = _tuyaDeviceType;
            if (_cloudMode)
                comType = TuyaDeviceType.Cloud;
            var device = new TuyaDeviceInformation() { Address = _tuyaDeviceIp, ID = _tuyaId, Key = _tuyaLocalKey, ProtocolVersion = _tuyaProtocolVersion, CommunicationType = comType };

            var response = await TuyaService.IdentifyDPs(device);

            Snackbar.Add($"{response} identified", Severity.Success);
            _tuyaDps = response;
        }
        catch (Exception e)
        {
            Logger.LogWarning(e, $"Error executing DP search for {_tuyaDeviceIp}");
            Snackbar.Add($"Error executing DP search <p>{e.Message}</p>", Severity.Error);
        }
        finally
        {
            _isInWait = false;
            StateHasChanged();
        }
    }

    // ReSharper disable once InconsistentNaming
    private async Task GetLocalKeyFromAPI()
    {
        try
        {
            var ret = await TuyaService.GetDeviceDataFromApiAsync(_tuyaId);
            if (ret.Item1)
            {
                _tuyaLocalKey = ret.Item2;
            }
        }
        catch(Exception e)
        {
            // ignored
            Logger.LogError(e, "Error retrieving LocalKey from TuyaApi");
        }
    }

    // ReSharper disable once InconsistentNaming
    private async Task GetDeviceNameFromAPI()
    {
        try
        {
            var ret = await TuyaService.GetDeviceDataFromApiAsync(_tuyaId);
            if (ret.Item1)
            {
                _tuyaName = ret.Item3;
            }
        }
        catch (Exception e)
        {
            // ignored
            Logger.LogError(e, "Error retrieving DeviceName from TuyaApi");
        }
    }

    private async Task TestTuyaDevice()
    {
        try
        {
            _isInWait = true;
            StateHasChanged();
            await Task.Delay(100);
            TuyaDeviceType comType = _tuyaDeviceType;
            if (_cloudMode)
                comType = TuyaDeviceType.Cloud;
            var device = new TuyaDeviceInformation() { Address = _tuyaDeviceIp, ID = _tuyaId, Key = _tuyaLocalKey, ProtocolVersion=_tuyaProtocolVersion, CommunicationType = comType };

            var response = await TuyaService.TestConnect(device);
            string message = $"<h3>connected to {_tuyaDeviceIp}</h3>";
            if (response.Count > 0)
            {
                message += "data items:<table>";
                foreach (var item in response)
                {
                    message += $"<tr><td>{item.DPNumber}:</td><td>{item.Value}</td></tr>";
                }
                message += "</table>";
            }
            Snackbar.Add(message, Severity.Success);
        }
        catch (Exception e)
        {
            Logger.LogWarning(e, $"Error testing {_tuyaDeviceIp}");
            Snackbar.Add($"Error connecting <p>{e.Message}</p>", Severity.Error);
        }
        finally
        {
            _isInWait = false;
            StateHasChanged();
        }
    }

    private void DeleteTuyaDevice()
    {
        try
        {
            _isInWait = true;
            StateHasChanged();

            TuyaConnectedDevices.RemoveDevice(_tuyaId);

            Snackbar.Add($"Device removed", Severity.Success);
        }
        catch (Exception e)
        {
            Logger.LogError(e, $"Error removing device {_tuyaDeviceIp} {_tuyaId}");
            Snackbar.Add($"Remove error", Severity.Error);
        }
        finally
        {
            _isInWait = false;
            _tuyaMonitoredDevices = TuyaConnectedDevices.GetMonitoredDevices();
            StateHasChanged();
        }
    }

    // ReSharper disable once InconsistentNaming
    private bool ParseDPList(string list, out List<byte> DPlist, out string error)
    {
        error = String.Empty;
        DPlist = new List<byte>();
        var separatedList = list.Split(" ,;:".ToCharArray()); //split the list by ',' ';' ':' and <space>
        foreach (var item in separatedList)
        {
            if (!string.IsNullOrEmpty(item.Trim()))
            {
                var success = byte.TryParse(item, out var DP);
                if (!success)
                {
                    error = item;
                    return false; // this went wrong and we cannot create the list
                }
                else
                {
                    DPlist.Add(DP);
                }
            }
        }
        DPlist.Distinct().ToList().Sort();
        return true;
    }

    private async Task SaveAddTuyaDeviceAsync()
    {
        if (_tuyaPolltimeValue <= 0)
        {
            Snackbar.Add($"No polling interval specified", Severity.Error);
            await Task.Delay(100);
            return;
        }

        List<byte> DPlist;
        if (!ParseDPList(_tuyaDps, out DPlist, out var errorLocation))
        {
            Snackbar.Add($"DP list cannot be read, error at '{errorLocation}'", Severity.Error);
            await Task.Delay(100);
            return;
        }

        if (_tuyaDeviceType == TuyaDeviceType.LocalTuya0D && DPlist.Count == 0)
        {
            Snackbar.Add($"device type 0D requires a list of DPs to be specified", Severity.Error);
            await Task.Delay(100);
            return;
        }

        try
        {
            _isInWait = true;
            StateHasChanged();

            TuyaDeviceType comType = _tuyaDeviceType;
            if (_cloudMode)
                comType = TuyaDeviceType.Cloud;

            var device = new TuyaDeviceInformation() { Address = _tuyaDeviceIp, 
                ID = _tuyaId, 
                Key = _tuyaLocalKey,
                CommunicationType = comType,
                ProtocolVersion = _tuyaProtocolVersion
            };
            
            _ = await TuyaService.TestConnect(device);

            TuyaConnectedDevices.AddDevice(device, _tuyaName, TimeSpan.FromSeconds(_tuyaPolltimeValue), DPlist);

            Snackbar.Add("Device saved", Severity.Success);
        }
        catch (Exception e)
        {
            Logger.LogError(e, $"Error adding device {_tuyaDeviceIp} {_tuyaId}");
            Snackbar.Add($"Device error, test first", Severity.Error);
        }
        finally
        {
            _isInWait = false;
            _tuyaMonitoredDevices = TuyaConnectedDevices.GetMonitoredDevices();
            StateHasChanged();
        }
    }

    private void OnTuyaScannerUpdate(object? sender, TuyaDeviceScanInfo item)
    {
        _tuyaScannedDevices = TuyaService.GetTuyaScanDevices();
        _tuyaMonitoredDevices = TuyaConnectedDevices.GetMonitoredDevices();
        InvokeAsync(StateHasChanged); //re render
    }

    private void OnTuyaDataUpdate(object? sender, EventArgs e)
    {
        _tuyaMonitoredData = TuyaConnectedDevices.GetMonitoredData();
        InvokeAsync(StateHasChanged); //re render
    }

}
